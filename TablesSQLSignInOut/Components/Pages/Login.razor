@page "/login"
@attribute [AllowAnonymous]
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<EditForm Model="loginModel" OnValidSubmit="HandleLogin" FormName="LoginForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label for="username">Username:</label>
        <InputText id="username" @bind-Value="loginModel.UserName" />
    </div>

    <div>
        <label for="password">Password:</label>
        <InputText id="password" type="password" @bind-Value="loginModel.Password" />
    </div>

    <button type="submit">Login</button>
</EditForm>

@code {
    private LoginModel loginModel = new LoginModel();

    private async Task HandleLogin()
    {
        var user = AuthenticateUser(loginModel.UserName, loginModel.Password);

        if (user != null)
        {
            var customAuthProvider = (CustomAuthenticationStateProvider)AuthenticationStateProvider;
            await customAuthProvider.MarkUserAsAuthenticated(user);
            NavigationManager.NavigateTo("/");
        }
        else
        {
            // Handle invalid login
        }
    }

    private User AuthenticateUser(string username, string password)
    {
        // Your authentication logic here
        return null;
    }

    public class LoginModel
    {
        public string UserName { get; set; }
        public string Password { get; set; }
    }
}
