@page "/edit/{EmployeeId:int}"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<YourDbContext> DbContextFactory
@inject NavigationManager Navigation

<h3>Edit Employee</h3>

@if (employee == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="employee" OnValidSubmit="HandleValidSubmit" FormName="EditEmployeeForm">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="mb-3">
            <label>Name:</label>
            <InputText class="form-control" @bind-Value="employee.Name" />
        </div>
        <div class="mb-3">
            <label>Family Name:</label>
            <InputText class="form-control" @bind-Value="employee.FamilyName" />
        </div>
        <button class="btn btn-success" type="submit">Save</button>
        <button class="btn btn-secondary ms-2" type="button" @onclick="GoBack">Cancel</button>
    </EditForm>
}

@code {
    [Parameter] public int EmployeeId { get; set; }
    private Employee? employee;

    protected override async Task OnInitializedAsync()
    {
        using var context = DbContextFactory.CreateDbContext();
        employee = await context.Employees.FindAsync(EmployeeId);
    }

    private async Task HandleValidSubmit()
    {
        using var context = DbContextFactory.CreateDbContext();
        var emp = await context.Employees.FindAsync(EmployeeId);
        if (emp != null)
        {
            emp.Name = employee.Name;
            emp.FamilyName = employee.FamilyName;
            await context.SaveChangesAsync();
            Navigation.NavigateTo("/dataview");
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/dataview");
    }
}
